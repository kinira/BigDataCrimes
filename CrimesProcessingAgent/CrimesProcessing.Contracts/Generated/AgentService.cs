// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AgentService.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CrimesProcessing.Contracts {

  /// <summary>Holder for reflection information generated from AgentService.proto</summary>
  public static partial class AgentServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for AgentService.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AgentServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJBZ2VudFNlcnZpY2UucHJvdG8SGmNyaW1lc1Byb2Nlc3NpbmcuQ29udHJh",
            "Y3RzIiMKE0NhbGN1bGF0ZUF2Z1JlcXVlc3QSDAoEeWVhchgBIAEoBSJeChRD",
            "YWxjdWxhdGVBdmdSZXNwb25zZRIMCgR5ZWFyGAEgASgFEhAKCGRpc3RyaWN0",
            "GAIgASgFEhMKC2NyaW1lc0NvdW50GAMgASgFEhEKCWNyaW1lVHlwZRgEIAEo",
            "CSJPChpDYWxjdWxhdGVQcmVkaWN0aW9uUmVxdWVzdBIMCgR5ZWFyGAEgASgF",
            "EgkKAXgYAiABKAESCQoBeRgDIAEoARINCgVtb250aBgEIAEoBSIyChtDYWxj",
            "dWxhdGVQcmVkaWN0aW9uUmVzcG9uc2USEwoLcHJvYmFiaWxpdHkYASABKAEi",
            "IAoNQ3JpbWVzUmVxdWVzdBIPCgdtZXNzYWdlGAEgASgJIiAKDkNyaW1lc1Jl",
            "c3BvbnNlEg4KBnJlc3VsdBgBIAEoCTLuAgoNQ3JpbWVzU2VydmljZRJhCghT",
            "YXlIZWxsbxIpLmNyaW1lc1Byb2Nlc3NpbmcuQ29udHJhY3RzLkNyaW1lc1Jl",
            "cXVlc3QaKi5jcmltZXNQcm9jZXNzaW5nLkNvbnRyYWN0cy5DcmltZXNSZXNw",
            "b25zZRKBAQoOR2V0UHJvYmFiaWxpdHkSNi5jcmltZXNQcm9jZXNzaW5nLkNv",
            "bnRyYWN0cy5DYWxjdWxhdGVQcmVkaWN0aW9uUmVxdWVzdBo3LmNyaW1lc1By",
            "b2Nlc3NpbmcuQ29udHJhY3RzLkNhbGN1bGF0ZVByZWRpY3Rpb25SZXNwb25z",
            "ZRJ2Cg9DYWxjdWxhdGVDcmltZXMSLy5jcmltZXNQcm9jZXNzaW5nLkNvbnRy",
            "YWN0cy5DYWxjdWxhdGVBdmdSZXF1ZXN0GjAuY3JpbWVzUHJvY2Vzc2luZy5D",
            "b250cmFjdHMuQ2FsY3VsYXRlQXZnUmVzcG9uc2UwAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CrimesProcessing.Contracts.CalculateAvgRequest), global::CrimesProcessing.Contracts.CalculateAvgRequest.Parser, new[]{ "Year" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CrimesProcessing.Contracts.CalculateAvgResponse), global::CrimesProcessing.Contracts.CalculateAvgResponse.Parser, new[]{ "Year", "District", "CrimesCount", "CrimeType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CrimesProcessing.Contracts.CalculatePredictionRequest), global::CrimesProcessing.Contracts.CalculatePredictionRequest.Parser, new[]{ "Year", "X", "Y", "Month" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CrimesProcessing.Contracts.CalculatePredictionResponse), global::CrimesProcessing.Contracts.CalculatePredictionResponse.Parser, new[]{ "Probability" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CrimesProcessing.Contracts.CrimesRequest), global::CrimesProcessing.Contracts.CrimesRequest.Parser, new[]{ "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CrimesProcessing.Contracts.CrimesResponse), global::CrimesProcessing.Contracts.CrimesResponse.Parser, new[]{ "Result" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CalculateAvgRequest : pb::IMessage<CalculateAvgRequest> {
    private static readonly pb::MessageParser<CalculateAvgRequest> _parser = new pb::MessageParser<CalculateAvgRequest>(() => new CalculateAvgRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CalculateAvgRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CrimesProcessing.Contracts.AgentServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalculateAvgRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalculateAvgRequest(CalculateAvgRequest other) : this() {
      year_ = other.year_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalculateAvgRequest Clone() {
      return new CalculateAvgRequest(this);
    }

    /// <summary>Field number for the "year" field.</summary>
    public const int YearFieldNumber = 1;
    private int year_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Year {
      get { return year_; }
      set {
        year_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CalculateAvgRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CalculateAvgRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Year != other.Year) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Year != 0) hash ^= Year.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Year != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Year);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Year != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Year);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CalculateAvgRequest other) {
      if (other == null) {
        return;
      }
      if (other.Year != 0) {
        Year = other.Year;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Year = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CalculateAvgResponse : pb::IMessage<CalculateAvgResponse> {
    private static readonly pb::MessageParser<CalculateAvgResponse> _parser = new pb::MessageParser<CalculateAvgResponse>(() => new CalculateAvgResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CalculateAvgResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CrimesProcessing.Contracts.AgentServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalculateAvgResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalculateAvgResponse(CalculateAvgResponse other) : this() {
      year_ = other.year_;
      district_ = other.district_;
      crimesCount_ = other.crimesCount_;
      crimeType_ = other.crimeType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalculateAvgResponse Clone() {
      return new CalculateAvgResponse(this);
    }

    /// <summary>Field number for the "year" field.</summary>
    public const int YearFieldNumber = 1;
    private int year_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Year {
      get { return year_; }
      set {
        year_ = value;
      }
    }

    /// <summary>Field number for the "district" field.</summary>
    public const int DistrictFieldNumber = 2;
    private int district_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int District {
      get { return district_; }
      set {
        district_ = value;
      }
    }

    /// <summary>Field number for the "crimesCount" field.</summary>
    public const int CrimesCountFieldNumber = 3;
    private int crimesCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CrimesCount {
      get { return crimesCount_; }
      set {
        crimesCount_ = value;
      }
    }

    /// <summary>Field number for the "crimeType" field.</summary>
    public const int CrimeTypeFieldNumber = 4;
    private string crimeType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CrimeType {
      get { return crimeType_; }
      set {
        crimeType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CalculateAvgResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CalculateAvgResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Year != other.Year) return false;
      if (District != other.District) return false;
      if (CrimesCount != other.CrimesCount) return false;
      if (CrimeType != other.CrimeType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Year != 0) hash ^= Year.GetHashCode();
      if (District != 0) hash ^= District.GetHashCode();
      if (CrimesCount != 0) hash ^= CrimesCount.GetHashCode();
      if (CrimeType.Length != 0) hash ^= CrimeType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Year != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Year);
      }
      if (District != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(District);
      }
      if (CrimesCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CrimesCount);
      }
      if (CrimeType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CrimeType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Year != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Year);
      }
      if (District != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(District);
      }
      if (CrimesCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CrimesCount);
      }
      if (CrimeType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CrimeType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CalculateAvgResponse other) {
      if (other == null) {
        return;
      }
      if (other.Year != 0) {
        Year = other.Year;
      }
      if (other.District != 0) {
        District = other.District;
      }
      if (other.CrimesCount != 0) {
        CrimesCount = other.CrimesCount;
      }
      if (other.CrimeType.Length != 0) {
        CrimeType = other.CrimeType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Year = input.ReadInt32();
            break;
          }
          case 16: {
            District = input.ReadInt32();
            break;
          }
          case 24: {
            CrimesCount = input.ReadInt32();
            break;
          }
          case 34: {
            CrimeType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CalculatePredictionRequest : pb::IMessage<CalculatePredictionRequest> {
    private static readonly pb::MessageParser<CalculatePredictionRequest> _parser = new pb::MessageParser<CalculatePredictionRequest>(() => new CalculatePredictionRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CalculatePredictionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CrimesProcessing.Contracts.AgentServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalculatePredictionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalculatePredictionRequest(CalculatePredictionRequest other) : this() {
      year_ = other.year_;
      x_ = other.x_;
      y_ = other.y_;
      month_ = other.month_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalculatePredictionRequest Clone() {
      return new CalculatePredictionRequest(this);
    }

    /// <summary>Field number for the "year" field.</summary>
    public const int YearFieldNumber = 1;
    private int year_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Year {
      get { return year_; }
      set {
        year_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private double x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private double y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "month" field.</summary>
    public const int MonthFieldNumber = 4;
    private int month_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Month {
      get { return month_; }
      set {
        month_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CalculatePredictionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CalculatePredictionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Year != other.Year) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Month != other.Month) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Year != 0) hash ^= Year.GetHashCode();
      if (X != 0D) hash ^= X.GetHashCode();
      if (Y != 0D) hash ^= Y.GetHashCode();
      if (Month != 0) hash ^= Month.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Year != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Year);
      }
      if (X != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Y);
      }
      if (Month != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Month);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Year != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Year);
      }
      if (X != 0D) {
        size += 1 + 8;
      }
      if (Y != 0D) {
        size += 1 + 8;
      }
      if (Month != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Month);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CalculatePredictionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Year != 0) {
        Year = other.Year;
      }
      if (other.X != 0D) {
        X = other.X;
      }
      if (other.Y != 0D) {
        Y = other.Y;
      }
      if (other.Month != 0) {
        Month = other.Month;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Year = input.ReadInt32();
            break;
          }
          case 17: {
            X = input.ReadDouble();
            break;
          }
          case 25: {
            Y = input.ReadDouble();
            break;
          }
          case 32: {
            Month = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CalculatePredictionResponse : pb::IMessage<CalculatePredictionResponse> {
    private static readonly pb::MessageParser<CalculatePredictionResponse> _parser = new pb::MessageParser<CalculatePredictionResponse>(() => new CalculatePredictionResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CalculatePredictionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CrimesProcessing.Contracts.AgentServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalculatePredictionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalculatePredictionResponse(CalculatePredictionResponse other) : this() {
      probability_ = other.probability_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalculatePredictionResponse Clone() {
      return new CalculatePredictionResponse(this);
    }

    /// <summary>Field number for the "probability" field.</summary>
    public const int ProbabilityFieldNumber = 1;
    private double probability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Probability {
      get { return probability_; }
      set {
        probability_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CalculatePredictionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CalculatePredictionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Probability != other.Probability) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Probability != 0D) hash ^= Probability.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Probability != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Probability);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Probability != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CalculatePredictionResponse other) {
      if (other == null) {
        return;
      }
      if (other.Probability != 0D) {
        Probability = other.Probability;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Probability = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CrimesRequest : pb::IMessage<CrimesRequest> {
    private static readonly pb::MessageParser<CrimesRequest> _parser = new pb::MessageParser<CrimesRequest>(() => new CrimesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CrimesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CrimesProcessing.Contracts.AgentServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrimesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrimesRequest(CrimesRequest other) : this() {
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrimesRequest Clone() {
      return new CrimesRequest(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CrimesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CrimesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CrimesRequest other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CrimesResponse : pb::IMessage<CrimesResponse> {
    private static readonly pb::MessageParser<CrimesResponse> _parser = new pb::MessageParser<CrimesResponse>(() => new CrimesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CrimesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CrimesProcessing.Contracts.AgentServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrimesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrimesResponse(CrimesResponse other) : this() {
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrimesResponse Clone() {
      return new CrimesResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private string result_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Result {
      get { return result_; }
      set {
        result_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CrimesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CrimesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result.Length != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CrimesResponse other) {
      if (other == null) {
        return;
      }
      if (other.Result.Length != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Result = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
